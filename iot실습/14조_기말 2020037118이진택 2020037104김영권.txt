#include "DSP2833x_Device.h"
#include "DSP2833x_Examples.h"
#include <stdlib.h>


#define LCDD0_H   GpioDataRegs.GPBSET.bit.GPIO57 = 1
#define LCDD1_H   GpioDataRegs.GPBSET.bit.GPIO56 = 1
#define LCDD2_H   GpioDataRegs.GPBSET.bit.GPIO61 = 1
#define LCDD3_H   GpioDataRegs.GPBSET.bit.GPIO60 = 1
#define LCDE_H   GpioDataRegs.GPBSET.bit.GPIO55 = 1
#define LCDRS_H   GpioDataRegs.GPBSET.bit.GPIO54 = 1
#define LCDD0_L   GpioDataRegs.GPBCLEAR.bit.GPIO57 = 1
#define LCDD1_L   GpioDataRegs.GPBCLEAR.bit.GPIO56 = 1
#define LCDD2_L   GpioDataRegs.GPBCLEAR.bit.GPIO61 = 1
#define LCDD3_L   GpioDataRegs.GPBCLEAR.bit.GPIO60 = 1
#define LCDE_L   GpioDataRegs.GPBCLEAR.bit.GPIO55 = 1
#define LCDRS_L   GpioDataRegs.GPBCLEAR.bit.GPIO54 = 1

#define DIP1 GpioDataRegs.GPBDAT.bit.GPIO48
#define DIP2 GpioDataRegs.GPBDAT.bit.GPIO49



void Gpio_select(void);
void Gpio_Fnd_out(unsigned char da);

interrupt void XINT1_isr(void);
interrupt void XINT2_isr(void);
void lcd_write(char data, unsigned char Rs);
void lcd_Gpio_data_out(unsigned char da);
void lcdprint_data(char *str);
void lcd_init(void);
interrupt void cpu_timer0_isr(void);
void start_timer(void);
void stop_timer(void);

//변수 선언
int timeFlag = 0;
int flag = 0;
char min1 = '1';
char min2 = '0';
char sec1 = '0';
char sec2 = '0';
char random_num1, random_num2, random_num3;
char firstNum = '0';
char secondNum = '0';
char thirdNum = '0';
char strike = '0';
char ball = '0';

unsigned char counter = 0;

//Timer
interrupt void cpu_timer0_isr(void)
{
    DINT;

    sec2--;
    if (sec2 < '0') {
        sec2 = '9';
        sec1--;

        if (sec1 < '0') {
            sec1 = '5';
            min2--;

            if (min2 < '0') {
                min2 = '9';
                min1--;

                if (min1 < '0') {
                    min1 = '0';
                    min2 = '0';
                    sec1 = '0';
                    sec2 = '0';

                    lcd_write(0x80, 0);
                    lcdprint_data("    Time Over   ");
                    lcd_write(0xC0, 0);
                    lcdprint_data("                ");
                    stop_timer();
                    timeFlag = 1;
                }
            }
        }
    }

    if (min1 != '0' || min2 != '0' || sec1 != '0' || sec2 != '0') {
        display_LCD1s();
    }

    EINT;
    PieCtrlRegs.PIEACK.all = PIEACK_GROUP1;
}


void lcd_write(char data, unsigned char Rs)
{
    if (Rs)
        LCDRS_H;
    else
        LCDRS_L;
    lcd_Gpio_data_out((data >> 4) & 0x0f);
    DELAY_US(1);
    LCDE_H;
    DELAY_US(1);
    LCDE_L;
    DELAY_US(1);

    lcd_Gpio_data_out(data & 0x0f);
    DELAY_US(1);
    LCDE_H;
    DELAY_US(1);
    LCDE_L;
    DELAY_US(41);
}

void lcd_Gpio_data_out(unsigned char da)
{
    if (da & 0x1)
        LCDD0_H;
    else
        LCDD0_L;
    if (da & 0x2)
        LCDD1_H;
    else
        LCDD1_L;
    if (da & 0x4)
        LCDD2_H;
    else
        LCDD2_L;
    if (da & 0x8)
        LCDD3_H;
    else
        LCDD3_L;
}

void lcd_init(void)
{
    lcd_write(0x28, 0);
    lcd_write(0x28, 0);
    lcd_write(0x0C, 0);
    lcd_write(0x01, 0);
    DELAY_US(1960);
    lcd_write(0x06, 0);
}

void lcdprint_data(char *str)
{
    unsigned char i = 0;
    while (str[i] != '\0')
    {
        lcd_write(str[i++], 1);
    }
}

//게임 중 LCD 1Line
void display_LCD1s(void)
{

    lcd_write(0x80, 0);
    lcdprint_data("  ");
    lcd_write(firstNum, 1);
    lcdprint_data(" ");
    lcd_write(secondNum, 1);
    lcdprint_data(" ");
	lcd_write(thirdNum, 1);
    lcdprint_data("  ");

//  lcd_write(random_num1, 1);
//	lcd_write(random_num2, 1);
//	lcd_write(random_num3, 1);
    lcd_write(min1, 1);
    lcd_write(min2, 1);
    lcd_write(':', 1);
    lcd_write(sec1, 1);
    lcd_write(sec2, 1);
    lcdprint_data("  ");
}

//스위치 1번
interrupt void XINT1_isr(void)
{
	if(DIP1 && DIP2){
	DINT;
	//타이머 초기화
	stop_timer();
	min1 = '1';
	min2 = '0';
	sec1 = '0';
	sec2 = '0';

	//gameNum 초기화
	firstNum = '0';
	secondNum = '0';
	thirdNum = '0';

	//strike or ball 초기화
	strike = '0';
	ball = '0';

	//win, timer깃발 초기화
	flag = 0;
	timeFlag = 0;

	//서로 다른 random수 생성
	while(1){
		random_num1 = '0'+ rand() % 10;
		random_num2 = '0'+ rand() % 10;
		random_num3 = '0'+ rand() % 10;

		if(random_num1 != random_num2 && random_num2 != random_num3 && random_num1 != random_num3 ){
			break;
		}
	}
	//시작 전 LCD
	lcd_write(0x80, 0);
	lcdprint_data(" Baseball Game!");
	lcd_write(0xC0, 0);
	lcdprint_data("     Enter      ");

	}else{
		//strike, ball 판정

		int st_cnt = 0;

		if (firstNum == random_num1) {
			st_cnt++;
		}
		if (secondNum == random_num2) {
			st_cnt++;
		}
		if (thirdNum ==  random_num3) {
			st_cnt++;
		}

		if (st_cnt == 1) {
			strike = '1';
		}
		else if (st_cnt == 2) {
			strike = '2';
		}
		else if (st_cnt == 3) {
			flag = 1;
		}
		else {
			strike = '0';
		}


		int ball_cnt = 0;

		if (firstNum == random_num2 || firstNum == random_num3) {
		    ball_cnt++;
		}
		if (secondNum == random_num1 || secondNum == random_num3) {
		    ball_cnt++;
		}
		if (thirdNum ==  random_num1 || thirdNum == random_num2) {
		    ball_cnt++;
		}

		if (ball_cnt == 1) {
		    ball = '1';
		}
		else if (ball_cnt == 2) {
		    ball = '2';
		}
		else if (ball_cnt == 3) {
		    ball = '3';
		}
		else {
		    ball = '0';
		}


		//strike,ball 표시
		 lcd_write(0xC0, 0);
		 lcdprint_data(" ");
		 lcd_write(strike, 1);
		 lcdprint_data(" Strike");
		 lcdprint_data(" ");
		 lcd_write(ball, 1);
		 lcdprint_data(" Ball");

		 //Win
		 if(flag==1){
			stop_timer();
			lcd_write(0x80, 0);
			lcdprint_data("    Your Win!   ");
			lcd_write(0xC0, 0);
			lcdprint_data("    Restart?    ");
		 }

		 //timeFlag
		 if(timeFlag==1){
			lcd_write(0xC0, 0);
			lcdprint_data("                ");
		 }
	}

	EINT;
	PieCtrlRegs.PIEACK.all = PIEACK_GROUP1;
}

//스위치2번
interrupt void XINT2_isr(void)
{
	if(DIP1 && DIP2){
	DINT;

	//타이머 시작 및 LCD
	lcd_write(0x80, 0);
	display_LCD1s();
	start_timer();

	//초기 strike, ball 표시
	 lcd_write(0xC0, 0);
	 lcdprint_data(" ");
	 lcd_write(strike, 1);
	 lcdprint_data(" Strike");
	 lcdprint_data(" ");
	 lcd_write(ball, 1);
	 lcdprint_data(" Ball");

	}else if(DIP1 && !DIP2){
		//첫번째 자리 증가
		  firstNum++;
			if (firstNum > '9') {
				firstNum = '0';
			}
		//FND 업데이트
		  counter = firstNum;

	}else if(!DIP1 && DIP2){
		//두번째 자리 증가
			secondNum++;
			if (secondNum > '9') {
				secondNum = '0';
			}
		//FND 업데이트
			counter = secondNum;

	}else{
		//세번째 자리 증가
		  thirdNum++;
		  if (thirdNum > '9') {
			  thirdNum = '0';
		    }
		  //FND 업데이트
		  counter = thirdNum;
	}

	//FND
	Gpio_Fnd_out(counter);
	counter;

	EINT;
	PieCtrlRegs.PIEACK.all = PIEACK_GROUP1;
}

void Gpio_Fnd_out(unsigned char da){
	if(da & 0x01) GpioDataRegs.GPBSET.bit.GPIO50 = 1;
	else GpioDataRegs.GPBCLEAR.bit.GPIO50 = 1;
	if(da & 0x02) GpioDataRegs.GPBSET.bit.GPIO51 = 1;
	else GpioDataRegs.GPBCLEAR.bit.GPIO51 = 1;
	if(da & 0x04) GpioDataRegs.GPBSET.bit.GPIO52 = 1;
	else GpioDataRegs.GPBCLEAR.bit.GPIO52 = 1;
	if(da & 0x08) GpioDataRegs.GPBSET.bit.GPIO53 = 1;
	else GpioDataRegs.GPBCLEAR.bit.GPIO53 = 1;
}

void Gpio_select(void)
{
    EALLOW;
    GpioCtrlRegs.GPAMUX2.all = 0x0000;
    GpioCtrlRegs.GPADIR.bit.GPIO25 = 1;
    GpioCtrlRegs.GPADIR.bit.GPIO24 = 1;
    GpioCtrlRegs.GPBDIR.bit.GPIO54 = 1;
    GpioCtrlRegs.GPBDIR.bit.GPIO55 = 1;
    GpioCtrlRegs.GPBDIR.bit.GPIO57 = 1;
    GpioCtrlRegs.GPBDIR.bit.GPIO56 = 1;
    GpioCtrlRegs.GPBDIR.bit.GPIO61 = 1;
    GpioCtrlRegs.GPBDIR.bit.GPIO60 = 1;
    GpioCtrlRegs.GPBDIR.bit.GPIO50 = 1;
	GpioCtrlRegs.GPBDIR.bit.GPIO51 = 1;
	GpioCtrlRegs.GPBDIR.bit.GPIO52 = 1;
	GpioCtrlRegs.GPBDIR.bit.GPIO53 = 1;
	GpioCtrlRegs.GPBDIR.bit.GPIO48 = 0;
	GpioCtrlRegs.GPBDIR.bit.GPIO49 = 0;
    EDIS;
}

void start_timer(void)
{

    CpuTimer0Regs.TCR.all = 0x4000;
    CpuTimer0Regs.PRD.all = 150000000;
    CpuTimer0Regs.TCR.bit.TSS = 0;
    CpuTimer0Regs.TCR.bit.TRB = 1;


    IER |= M_INT1;
    PieCtrlRegs.PIEIER1.bit.INTx7 = 1;

    PieCtrlRegs.PIEACK.all = PIEACK_GROUP1;
}

void stop_timer(void)
{

    IER &= ~M_INT1;
    PieCtrlRegs.PIEIER1.bit.INTx7 = 0;


    CpuTimer0Regs.TCR.all = 0x0000;
    CpuTimer0Regs.TCR.bit.TRB = 1;


    PieCtrlRegs.PIEACK.all = PIEACK_GROUP1;
}

void main(void)
{
    InitSysCtrl();
    Gpio_select();
    DINT;
    InitPieCtrl();
    lcd_init();
    IER = 0x0000;
    IFR = 0x0000;
    InitPieVectTable();

    EALLOW;
    PieVectTable.XINT1 = &XINT1_isr;
    PieVectTable.XINT2 = &XINT2_isr;
    GpioCtrlRegs.GPAMUX2.bit.GPIO26 = 0;
    GpioCtrlRegs.GPAMUX2.bit.GPIO27 = 0;
    GpioCtrlRegs.GPADIR.bit.GPIO26 = 0;
    GpioCtrlRegs.GPADIR.bit.GPIO27 = 0;
    GpioIntRegs.GPIOXINT1SEL.bit.GPIOSEL = 27;
    GpioIntRegs.GPIOXINT2SEL.bit.GPIOSEL = 26;
    PieVectTable.TINT0 = &cpu_timer0_isr;
    EDIS;

    XIntruptRegs.XINT1CR.bit.POLARITY = 0;
    XIntruptRegs.XINT2CR.bit.POLARITY = 0;
    XIntruptRegs.XINT1CR.bit.ENABLE = 1;
    XIntruptRegs.XINT2CR.bit.ENABLE = 1;

    PieCtrlRegs.PIECTRL.bit.ENPIE = 1;
    PieCtrlRegs.PIEIER1.bit.INTx4 = 1;
    PieCtrlRegs.PIEIER1.bit.INTx5 = 1;
    PieCtrlRegs.PIEIER1.bit.INTx7 = 1;
    IER |= M_INT1 | M_INT13;

    EINT;
    for(;;);
}
